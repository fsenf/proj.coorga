

##LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
## automatically generated by 26-special_threshold_calculations.ipynb
##TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT

import numpy as np

import tropy.analysis_tools.grid_and_interpolation as gi

#########################################################################
#########################################################################

def atlantic_domain():
    
    x1, x2 = -5500., -2000.
    y1, y2 = 0., 2000.

    
    return (x1, x2), (y1, y2)

#########################################################################
#########################################################################

def atlantic_masking(lon, lat, f, mask_value = 0.):
        
    '''
    Sets all values of f outside the tropical Atlantic domain to zero,
    
    INPUT
    =====
    lon: longitude
    lat: latitutde
    f: field
    
    OUTPUT
    ======
    fm : masked field
    '''
    
    
    (x1, x2), (y1, y2) = atlantic_domain()

    x, y = gi.ll2xy(lon, lat, lon0 = 0, lat0 = 0)
    
    rmask = (x > x1) & (x < x2)& (y > y1) & (y < y2)

    fm = np.where(rmask, f, mask_value)
    
    return fm


#########################################################################
#########################################################################

def atlantic_cutout_of_clusterdata(d, dext = 0.):
    
    '''
    Masks a cluster data dictionary.
    
    
    INPUT
    =====
    d: cluster data set
    
    
    OUTPUT
    ======
    dcut: regionally cutted data
    '''
    
    
    # get cell positions
    clon, clat = d['lon_mean'], d['lat_mean']
    x, y = gi.ll2xy(clon, clat, lon0 = 0., lat0 = 0.)
    
    # region cutout
    (x1, x2), (y1, y2) = atlantic_domain()

    # extent the range
    x1, x2 = x1 - dext, x2 + dext
    y1, y2 = y1 - dext, y2 + dext
    
    
    # regional masks
    xmask = (x > x1) & (x < x2)
    ymask = (y > y1) & (y < y2)

    rmask = xmask & ymask


    dcut = {}
    for k in d.keys():
        try:
            dcut[k] = d[k][rmask]
        except:
            print 'No masking applies for %s' % k
    
    return dcut
