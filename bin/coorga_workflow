#!/usr/bin/env python


import os, sys, glob
import argparse
from coorga.inout.config_inout import json2dict 
import coorga.object_creation.save_cluster_properties as save_cluster_properties
import coorga.object_creation.save_collection as save_collection
import coorga.object_creation.add_variable2clustdat as add_variable2clustdat
import coorga.object_creation.save_numberdensity as save_numberdensity
import coorga.object_creation.save_pair_calculations as save_pair_calculations
import coorga.object_creation.save_bootstrap_cluster as save_bootstrap_cluster

######################################################################
######################################################################


def default_settings():

    default_sett = {}

    default_sett['no_clustering'] = False
    default_sett['no_collection'] = False
    default_sett['no_addvars'] = False
    default_sett['no_number_density'] = False

    return default_sett

######################################################################
######################################################################

def option_handling(default):



    parser = argparse.ArgumentParser(
    
        description = 'Performs the full Cluster-Analysis Workflow for a Set of Files')
    
    parser.add_argument ("filename",
                         help="name of the json file containing configuration")

    parser.add_argument("--no_clustering",
                        default = default['no_clustering'],
                        action = 'store_true',
                        help="Switch clustering off")

    parser.add_argument("--no_collection",
                        default = default['no_collection'],
                        action = 'store_true',
                        help="Switch collection gathering off")

    parser.add_argument("--no_addvars",
                        default = default['no_addvars'],
                        action = 'store_true',
                        help="Switch addition of variables off")

    parser.add_argument("--no_number_density",
                        default = default['no_number_density'],
                        action = 'store_true',
                        help="Switch number density calculation off")
    
    parser.add_argument("--no_pair_correlations",
                        default = False,
                        action = 'store_true',
                        help="Switch pair correlation calculation off")

    parser.add_argument("--bootstrapping",
                        default = False,
                        action = 'store_true',
                        help="Switch bootstrapping on")



    return vars(parser.parse_args())


######################################################################
######################################################################

def resolve_config(config, N = 10):

    '''
    Trys to resolve config strings.

    Parameters
    ----------
    config : dict
        configuration dictionary


    N : int, optional default = 10
        number of iterations (fixed)
    '''
    for i in range(N):
        for k in config.keys():

            s = config[k]
            try:
                config[k] = s.format( **config )
            except:
                pass # no string argument
    
    return

######################################################################
######################################################################


def make_cluster_analysis( config ):

    '''
    Performs Cluster Analysis.

    Parameters
    ----------
    config : dict
        set of workflow configuration parameters

    '''

    print
    print 'Run Cluster Analysis'
    print '####################'
    

    # prepare options
    # ================
    sett = dict(do_output = True)   
    for key in ['varname', 'expname', 'output_dir']:
        sett[key] = config[key].format(**config)

    sett['input_options'] = config['input_options']

    
    # get filelist
    # ============
    fnames = '{input_dir}/{input_files}'.format( **config ) 
    filelist = glob.glob( fnames.format( **config ) )


    # loop over all files
    # ====================
    for fname in filelist:

        save_cluster_properties.main( fname, **sett)

    print

    return

######################################################################
######################################################################



def add_vars2cluster( config ):

    '''
    Adds addtional Variables to Cluster Files.

    Parameters
    ----------
    config : dict
        set of workflow configuration parameters

    '''

    print
    print 'Add Variables'
    print '####################'
    
    # get options
    expname = config['expname']
    odir = config['output_dir']
    addvar_list = config['addvar_list']

    # gather addvar files
    addvar_files = {}
    for addvar_name in addvar_list:
        addnames = '{addvar_dir}/{addvar_files}'.format( **config ) 
        addvar_files[addvar_name] = glob.glob( addnames.format( addvar_name = addvar_name, **config ) )
 
    # get filelist
    fnames = '{input_dir}/{input_files}'.format( **config ) 
    filelist = glob.glob( fnames.format( **config ) )
    
    cluster_list = []

    for i, fname in enumerate( filelist ):

        basename = os.path.splitext(os.path.basename(fname))[0]
        clustname = '%s/clust_prop_%s_%s.h5' % (odir, basename, expname)

        addfile_list = []
        for addvar_name in addvar_list:
            addfile_list.append( addvar_files[addvar_name][i] )

        add_variable2clustdat.update_clusterfile(clustname, addvar_list, addfile_list)
    print

    return

######################################################################
######################################################################

def make_cluster_collection(config):

    '''
    Gathers a Cluster Collection.

    Parameters
    ----------
    config : dict
        set of workflow configuration parameters

    '''

    print
    print 'Gather Cluster Collection'
    print '#########################'
   

    # get options
    expname = config['expname']
    collection_file = '{collection_dir}/{collection_file}'.format( **config )
    odir = config['output_dir']

    # get filelist
    fnames = '{input_dir}/{input_files}'.format( **config ) 
    filelist = glob.glob( fnames.format( **config ) )
    
    cluster_list = []

    for fname in filelist:

        basename = os.path.splitext(os.path.basename(fname))[0]
        clustname = '%s/clust_prop_%s_%s.h5' % (odir, basename, expname)

        cluster_list.append( clustname )

    save_collection.main( cluster_list, output_file = collection_file)

    print

    return

  
######################################################################
######################################################################


def make_number_density( config ):

    '''
    Calculates and saves Number Density.

    Parameters
    ----------
    config : dict
        set of workflow configuration parameters

    '''

    print
    print 'Save Number Density'
    print '#########################'
   

    # get options
    collection_file = '{collection_dir}/{collection_file}'.format( **config )
    number_density_file = '{number_density_dir}/{number_density_file}'.format( **config )

     # also prepare interpolation options
    fnames = '{input_dir}/{input_files}'.format( **config ) 
    filelist = glob.glob( fnames.format( **config ) )

    iopt = dict( do_interpolation = True,
                 variable_filename = filelist[0],
                 variable_name = config['varname'],
                 input_options = config['input_options'])

    save_numberdensity.main( collection_file, 
                             output_file = number_density_file,
                             **iopt )

    print

    return

 

######################################################################
######################################################################


def add_pair_correlations( config ):

    '''
    Calculates and saves Pair Correlations.

    Parameters
    ----------
    config : dict
        set of workflow configuration parameters

    '''

    print
    print 'Save Pair Correlations and Counts'
    print '#################################'
   

    # get options
    collection_file = '{collection_dir}/{collection_file}'.format( **config )
    number_density_file = '{number_density_dir}/{number_density_file}'.format( **config )

    pcount_variables = config['pcount_variables']
    save_pair_calculations.main( collection_file, 
                                 number_density_file,
                                 pcount_variables = pcount_variables,
                                 no_pcf = True)

    print

    return

 
######################################################################
######################################################################


def make_cluster_bootstrap( config ):

    '''
    Performs Cluster Bootstrap Analysis.


    Parameters
    ----------
    config : dict
        set of workflow configuration parameters


    Notes
    -----
    We work with already generate clusterdata - therefore input
    is read from output_dir.

    For bootstrap data, we use an additional directory - therefore
    output is written into boot_dir.
    '''

    print
    print 'Run Bootstrap Analysis'
    print '######################'
    

    # prepare options
    # ================
    sett = dict(do_output = True)   
    sett['output_dir'] = config['boot_dir']
    sett['bootstrap_options'] = config['bootstrap_options']


    # number dens file
    # ================
    number_density_file = '{number_density_dir}/{number_density_file}'.format( **config )

    # cluster directory
    # ==================
    cluster_dir = config['output_dir']
    expname = config['expname']

    
    # get filelist
    # ============
    fnames = '{input_dir}/{input_files}'.format( **config ) 
    filelist = glob.glob( fnames.format( **config ) )

    # loop over all files
    # ====================
    cluster_list = []

    for fname in filelist:

        basename = os.path.splitext(os.path.basename(fname))[0]
        clustname = '%s/clust_prop_%s_%s.h5' % (cluster_dir, basename, expname)

        save_bootstrap_cluster.main( clustname, number_density_file, **sett)

    print

    return


######################################################################
######################################################################


def main( sett, workflow_config ):

    '''
    Full coorga analysis workflow.


    Parameters
    ----------
    sett : dict
        option handling

    workflow_config : dict
        user configuration
    '''

    # LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
    # (1) Cluster Analysis per File
    # TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
    if not sett['no_clustering']:
        make_cluster_analysis( workflow_config )


    # LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
    # (2) Add Variables to Cluster File
    # TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
    if not sett['no_addvars']:
        add_vars2cluster( workflow_config )


    # LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
    # (3) Cluster Collections
    # TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
    if not sett['no_collection']:
        make_cluster_collection( workflow_config )


    # LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
    # (4) Save Number Density
    # TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
    if not sett['no_number_density']:
        make_number_density( workflow_config )

    # LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
    # (5) Add Pair Correlations
    # TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
    if not sett['no_pair_correlations']:
        add_pair_correlations( workflow_config )

    return


######################################################################
######################################################################


def boot_main( sett, workflow_config ):

    '''
    Full coorga bootstrap analysis workflow.


    Parameters
    ----------
    sett : dict
        option handling

    workflow_config : dict
        user configuration
    '''

    # LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
    # (1) Cluster Bootstrap Analysis per File
    # TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
    make_cluster_bootstrap( workflow_config )


    # LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
    # (2) the Other Main Analysis with modified Config
    # TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
    
    # copy and modify processing settings
    boot_sett = sett.copy()
    
    boot_sett['no_clustering'] = True
    boot_sett['no_number_density'] = True

    # copy and modify workflow config
    boot_config = workflow_config.copy()

    boot_config['collection_dir'] = boot_config['boot_dir'] 
    boot_config['output_dir'] = boot_config['boot_dir'] 

    # run remaing analysis
    main( boot_sett, boot_config )

    return


######################################################################
######################################################################


if __name__ == '__main__':

 
    # option handling ----------------------------------------------------
    sett = option_handling( default_settings() )
    # ================================================================

    
    # read configuration ---------------------------------------------
    workflow_config = json2dict( sett['filename'] )
    resolve_config( workflow_config )
    # ================================================================


    # run workflow ---------------------------------------------------
    main( sett, workflow_config )

    if sett['bootstrapping']:

        boot_main( sett, workflow_config )
    # ===============================================================



######################################################################
######################################################################



